Критически важно обратить внимание на вопросы потокобезопасности, когда
разрабатывается параллельный код: безопасность не может быть
скомпрометирована. Важность безопасности не является уникальной чертой
многопоточных программ – однопоточные программы также должны заботиться о
сохранении безопасности и корректности – но использование потоков представляет
собой дополнительные вызовы безопасности, не представленные в однопоточных
программах. Подобным образом, использование потоков порождает
дополнительные формы сбоев живучести (liveness failure), которые не происходят в
однопоточных программах.
Пока безопасность означает “ничего плохого никогда не случается”,
живучесть заботится о дополнительной цели, которая гласит “что-то хорошее
когда-нибудь случается”. Сбои в работе возникают, когда активность попадает в
такое состояние, что постоянно невозможен прогресс. Одной из форм сбоя в
работе, который может происходить в последовательной программе, является
непреднамеренное создание бесконечного цикла, из-за которого последующий код
никогда не получит возможность выполнится. Использование потоков вводит
дополнительные риски для живучести. Например, если поток A ожидает ресурс,
который поток B удерживает эксклюзивно, и поток B никогда не освободит его, A
будет ожидать вечно. Глава 10 описывает различные формы сбоев живучести
потока и способы их избежать, включая взаимоблокировки (deadlock)
6
, голодание

(starvation)
7
и динамическая взаимоблокировка (livelock)
8
.

Подобно большинству ошибок параллельного выполнения, ошибки
вызывающие сбои живучести потока могут быть неуловимы, потому что зависят от
времени происхождения событий (timing of events) в различных потоках, и,
поэтому, не всегда проявляют себя в разработке или в тестировании.
6
Взаимная блокировка (deadlock, секция 10.1) описывает ситуацию, когда два или более потока
блокируются навсегда, каждый ожидая другого.
7 Голодание (starvation, секция 10.3.1) описывает ситуацию, когда поток не может получить доступ к
совместно используемым ресурсам и не может продвинуться в своём выполнении дальше.
8 Поток часто реагирует на события из другого потока. Если действие другого потока тоже является
ответом на событие из другого потока, то может произойти динамическая взаимоблокировка
(livelock, секция 10.3.3). Подробнее в https://urvanov.ru/2016/05/27/java-8-многопоточность/#liveness.