Приложения GUI ранее были однопоточными, что приводило к тому, что-либо
приходилось часто опрашивать код на возникновение входящих событий (которые
беспорядочны и назойливы), либо выполнять весь код приложения косвенно, через
“основной цикл событий (main event loop)”. Если код, вызванный из основного
цикла событий, выполнялся слишком долго, то пользовательский интерфейс
“замерзал” в ожидании завершения его работы, потому что последующие события
GUI не могут быть обработаны до тех пор, пока не будет возвращено управление
основному циклу событий.
Современные фреймворки GUI3

, такие как AWT или Swing toolkits, заменили
основной цикл событий механизмом рассылки событий (event dispatch thread, edt).
Когда возникает событие пользовательского интерфейса, например, такое как
нажатие кнопки, в потоке событий будут вызваны объявленные в приложении
обработчики. Большинство фрэймворков GUI имеют однопоточные подсистемы,
так что основной цикл событий всё ещё присутствует, но он запускается в
собственном потоке под управлением инструментария GUI, а не приложения.
Если в потоке событий выполняются кратковременные задачи, интерфейс
остаётся отзывчивым, поскольку поток событий всегда способен обрабатывать
действия пользователя достаточно быстро. Однако, обработка долго
выполняющихся задач в потоке событий, таких как проверка орфографии, в
большом документе или получение ресурсов по сети, ухудшает отзывчивость. Если
пользователь выполняет какие-то действия, пока выполняется такая задача,
появится большая задержка до того момента, как поток событий сможет
обработать их или даже просто узнать о них. Сгущая краски, отметим, что
пользовательский интерфейс не только становится недоступен, но также
невозможно нажать кнопку отмены задачи, даже если UI имеет таковую, потому
что поток событий занят и не может обработать событие нажатия кнопки до
завершения длинной задачи! Однако, если вместо этого, долго работающая задача
выполняется в отдельном потоке, поток событий остаётся свободным для
обработки событий UI, делая UI более отзывчивым.